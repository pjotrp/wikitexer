#! /usr/bin/ruby
#
# Author:: Pjotr Prins
# Copyright:: October 2008
# License:: Ruby License

rootpath = File.dirname(File.dirname(__FILE__))
$: << rootpath+'/lib' 

require 'optparse'
require 'ostruct'
require 'util/other/version'
require 'wikitexer'
require 'wtlatex'
require 'wthtml'


WIKITEXER_VERSION = 'wikitexer '+Version.get(File.dirname(__FILE__),'VERSION')+' by Pjotr Prins'
LATEX = 1
HTML  = 2

options = OpenStruct.new()
opts = OptionParser.new() { |opts|
  opts.on_tail("-h", "--help", "Show help and examples") {
    print(opts)
    print <<EXAMPLE

Examples:

		cat input.tex | wikitexer --latex - > output.tex
		cat input.tex | wikitexer --html - > output.html
		wikitexer --latex -r latex.rb input1.tex input2.tex > output.tex
		wikitexer --html -r html.rb input1.tex input2.tex > output.html

For a full description see http://URL/

EXAMPLE

    exit()
  }
  
  opts.on("--latex", "generate LaTeX output") do |b|
    options.outputtype = LATEX
  end

  opts.on("--html", "generate HTML output") do |b|
    options.outputtype = HTML
  end

  opts.on("--css stylesheet.css", String, "URI to .css file") do |uri|
    options.css = uri
  end

  opts.on('-r filename.rb',String,"Use Ruby module") do | fn |
    options.filenamerb = fn
  end

  opts.on("-q", "--quiet", "Run quietly") do |q|
    options.quiet = q
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options.verbose = v
  end

  opts.on("-t", "--[no-]trace", "Debug") do |t|
    options.trace = t
  end

  opts.on("--", "Read from stdin") do | t |
    options.use_stdin = t
  end

}
opts.parse!(ARGV)


print WIKITEXER_VERSION,"\n" if not options.quiet and !options.use_stdin

raise 'I can not use both stdin and input files' if options.use_stdin and ARGV.size > 0 

if options.outputtype==LATEX
  handler = WtLatex.new
elsif options.outputtype==HTML
  handler = WtHtml.new(options.css)
else
  raise 'Unknown output type'
end

wikitexer = WikiTexer.new(handler)

handler.writer.header

if options.use_stdin
  num = 1
  $stdin.each_line do | s |
		wikitexer.addline(s,num)
		num += 1
	end
else
  ARGV.each do | fn |
    num = 1
		File.open(fn).each_line do | s |
		  wikitexer.addline(s,num,fn)
			num += 1
		end
	end
end

handler.writer.footer

