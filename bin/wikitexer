#! /usr/bin/env ruby
#
# Author:: Pjotr Prins
# Copyright:: October 2008-2012
# License:: Ruby License

rootpath = File.dirname(File.dirname(__FILE__))
$: << rootpath+'/lib' << rootpath + '/contrib/rbib/lib'

$UNITTEST = nil

require 'optparse'
require 'ostruct'
require 'bibtex'
require 'control/wikitexer'
require 'output/wtlatex'
require 'output/wthtml'
require 'input/wtparser'

WIKITEXER_VERSION = File.dirname(__FILE__)+'/VERSION'
WIKITEXER_SHOW = 'wikiTeXer '+WIKITEXER_VERSION+' by Pjotr Prins'
LATEX = 1
HTML  = 2

bib_style = {}
style = {}
parse_bib = true

options = OpenStruct.new()
opts1 = OptionParser.new() { |opts|
  opts.on_tail("-h", "--help", "Show help and examples") {
    print(opts)
    print <<EXAMPLE

Examples:

    cat input.tex | wikitexer --latex - > output.tex
    cat input.tex | wikitexer --html - > output.html
    wikitexer --latex -r latex.rb input1.tex input2.tex > output.tex
    wikitexer --html -r html.rb input1.tex input2.tex > output.html

For a full description see https://github.com/pjotrp/wikitexer

EXAMPLE

    exit()
  }
  
  opts.on("--latex", "generate LaTeX output") do |b|
    options.outputtype = LATEX
  end

  opts.on("--html", "generate HTML output") do |b|
    options.outputtype = HTML
  end

  opts.on("--css stylesheet.css", String, "URI to .css file") do |uri|
    options.css = uri
  end

  opts.on("--indent-env lang", String, "Set indented lines to language") do |l|
    options.indent_env = l
  end

  opts.on('-r filename.rb',String,"Use Ruby module") do | fn |
    options.filenamerb = fn
  end

  opts.on("--no-parse-bib", "Bibliography: do not parse bib files") do
    parse_bib = false
  end

  opts.on("--bib-cites", "Bibliography: show citation values") do
    bib_style[:bib_cites] = true
  end

  opts.on("--bib-nrg", "Bibliography format: Nature") do
    bib_style[:format] = :nrg
  end

  opts.on("--bib-springer", "Bibliography format: Springer") do
    bib_style[:format] = :springer
  end

  opts.on("--final", "Final version (no citation values)") do
    bib_style[:final] = true
    style[:final] = true
  end

  opts.on("-q", "--quiet", "Run quietly") do |q|
    options.quiet = q
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options.verbose = v
  end

  opts.on("-t", "--[no-]trace", "Debug") do |t|
    options.trace = t
  end

  opts.on("--", "Read from stdin") do | t |
    options.use_stdin = t
  end

}
opts = opts1
opts.parse!(ARGV)

$bib_style = bib_style # obviously a hack
$style = style
$indent_env = options.indent_env

$stderr.print WIKITEXER_SHOW,"\n" if not options.quiet and !options.use_stdin

raise 'I can not use both stdin and input files' if options.use_stdin and ARGV.size > 0 

if options.outputtype==LATEX
  handler = WtLatex.new(nil)
elsif options.outputtype==HTML
  handler = WtHtml.new(options.css)
else
  raise 'Unknown output type'
end

parser = WtParser.new(handler.creator)

wikitexer = WikiTexer.new(parser, handler.writer)

handler.writer.header

if options.use_stdin
  num = 1
  $stdin.each_line do | s |
    wikitexer.addline(s,num)
    num += 1
  end
else
  ARGV.each do | fn |
    if fn =~ /.bib$/
      if parse_bib
        Bibtex::Parser.parse(fn).map do |entry|
          # $stderr.print entry
          wikitexer.add_reference entry
        end
      end
    else
      num = 1
      File.open(fn,"r:iso-8859-1:utf-8",&:read).each_line do | s |
        # $stderr.print(s)
        wikitexer.addline(s,num,fn)
        num += 1
      end
      wikitexer.write_paragraph(nil)
    end
  end
end

wikitexer.write_bibliography(bib_style)

handler.writer.footer

